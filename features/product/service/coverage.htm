
<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>service: Go Coverage Report</title>
		<style>
			body {
				background: black;
				color: rgb(80, 80, 80);
			}
			body, pre, #legend span {
				font-family: Menlo, monospace;
				font-weight: bold;
			}
			#topbar {
				background: black;
				position: fixed;
				top: 0; left: 0; right: 0;
				height: 42px;
				border-bottom: 1px solid rgb(80, 80, 80);
			}
			#content {
				margin-top: 50px;
			}
			#nav, #legend {
				float: left;
				margin-left: 10px;
			}
			#legend {
				margin-top: 12px;
			}
			#nav {
				margin-top: 10px;
			}
			#legend span {
				margin: 0 5px;
			}
			.cov0 { color: rgb(192, 0, 0) }
.cov1 { color: rgb(128, 128, 128) }
.cov2 { color: rgb(116, 140, 131) }
.cov3 { color: rgb(104, 152, 134) }
.cov4 { color: rgb(92, 164, 137) }
.cov5 { color: rgb(80, 176, 140) }
.cov6 { color: rgb(68, 188, 143) }
.cov7 { color: rgb(56, 200, 146) }
.cov8 { color: rgb(44, 212, 149) }
.cov9 { color: rgb(32, 224, 152) }
.cov10 { color: rgb(20, 236, 155) }

		</style>
	</head>
	<body>
		<div id="topbar">
			<div id="nav">
				<select id="files">
				
				<option value="file0">MyEcommerce/features/product/service/logic.go (100.0%)</option>
				
				</select>
			</div>
			<div id="legend">
				<span>not tracked</span>
			
				<span class="cov0">not covered</span>
				<span class="cov8">covered</span>
			
			</div>
		</div>
		<div id="content">
		
		<pre class="file" id="file0" style="display: none">package service

import (
        "MyEcommerce/features/product"
        "errors"
)

type productService struct {
        productData product.ProductDataInterface
}

func New(repo product.ProductDataInterface) product.ProductServiceInterface <span class="cov8" title="1">{
        return &amp;productService{
                productData: repo,
        }
}</span>

func (ps *productService) Create(userIdLogin int, input product.Core) error <span class="cov8" title="1">{
        if input.Name == "" </span><span class="cov8" title="1">{
                return errors.New("nama produk tidak boleh kosong")
        }</span>

        <span class="cov8" title="1">if input.Price &lt;= 0 </span><span class="cov8" title="1">{
                return errors.New("harga produk harus lebih besar dari 0")
        }</span>

        <span class="cov8" title="1">err := ps.productData.Insert(userIdLogin, input)
        if err != nil </span><span class="cov8" title="1">{
                return err
        }</span>

        <span class="cov8" title="1">return nil</span>
}

// GettAll implements product.ProductServiceInterface.
func (ps *productService) GetAll(page, limit int, category string) ([]product.Core, error) <span class="cov8" title="1">{
        if page == 0 </span><span class="cov8" title="1">{
                page = 1
        }</span>

        <span class="cov8" title="1">if limit == 0 </span><span class="cov8" title="1">{
                limit = 8
        }</span>

        <span class="cov8" title="1">products, err := ps.productData.SelectAll(page, limit, category)
        if err != nil </span><span class="cov8" title="1">{
                return nil, err
        }</span>

        <span class="cov8" title="1">return products, nil</span>
}

// GetById implements product.ProductServiceInterface.
func (ps *productService) GetById(IdProduct int) (*product.Core, error) <span class="cov8" title="1">{
        result, err := ps.productData.SelectById(IdProduct)
        return result, err
}</span>

// Update implements product.ProductServiceInterface.
func (ps *productService) Update(userIdLogin int, input product.Core) error <span class="cov8" title="1">{
        err := ps.productData.Update(userIdLogin, input)
        if err != nil </span><span class="cov8" title="1">{
                return err
        }</span>
        <span class="cov8" title="1">return nil</span>
}

// Delete implements product.ProductServiceInterface.
func (ps *productService) Delete(userIdLogin int, IdProduct int) error <span class="cov8" title="1">{
        err := ps.productData.Delete(userIdLogin, IdProduct)
        if err != nil </span><span class="cov8" title="1">{
                return err
        }</span>

        <span class="cov8" title="1">return nil</span>
}

// GetByUserId implements product.ProductServiceInterface.
func (ps *productService) GetByUserId(userIdLogin int) ([]product.Core, error) <span class="cov8" title="1">{
        products, err := ps.productData.SelectByUserId(userIdLogin)
        if err != nil </span><span class="cov8" title="1">{
                return nil, err
        }</span>
        <span class="cov8" title="1">return products, nil</span>
}

// Search implements product.ProductServiceInterface.
func (ps *productService) Search(query string) ([]product.Core, error) <span class="cov8" title="1">{
        products, err := ps.productData.Search(query)
        if err != nil </span><span class="cov8" title="1">{
                return products, err
        }</span>
        <span class="cov8" title="1">return products, nil</span>
}
</pre>
		
		</div>
	</body>
	<script>
	(function() {
		var files = document.getElementById('files');
		var visible;
		files.addEventListener('change', onChange, false);
		function select(part) {
			if (visible)
				visible.style.display = 'none';
			visible = document.getElementById(part);
			if (!visible)
				return;
			files.value = part;
			visible.style.display = 'block';
			location.hash = part;
		}
		function onChange() {
			select(files.value);
			window.scrollTo(0, 0);
		}
		if (location.hash != "") {
			select(location.hash.substr(1));
		}
		if (!visible) {
			select("file0");
		}
	})();
	</script>
</html>
