openapi: '3.0.3'
info:
  description: |
    Ini Adalah Dokumentasi E-commerce App API
  version: "1.0.0"
  title: E-commerce App
  contact:
    email: l3nteam@gmail.com
servers:
  # Added by API Auto Mocking Plugin
  - description: E-commerce App
    url:  https://virtserver.swaggerhub.com/L3NONEONE_1/EcommerceAppProject/1.0.0
  - description: Local
    url: 'http://localhost:8000'
tags:
  - name: Auth
    description: API AUTH
  - name: User
    description: API USER
  - name: Product
    description: API PRODUCT
  - name: Cart
    description: API CART
  - name: Order
    description: API ORDER
  - name: Admin
    description: API ADMIN
paths:
  /login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: lendra@gmail.com
                password:
                  type: string
                  example: lendra123
      responses:
        '200':
          description: successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: success login
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpM
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
  /users:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersSchema'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful createUser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error createUser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
    get:
      tags:
        - User
      summary: Get user profil
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfil'
        '400':
          description: Invalid userid supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProfil'
        description: Updated user object
        required: true
      responses:
        '200':
          description: succes update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Invalid userid supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      responses:
        '200':
          description: succes delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Invalid userid supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'




  /products:
    post:
      tags:
        - Product
      summary: Create Product
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSchema'
      responses:
        '200':
          description: successful Create Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Create Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
    get:
      tags:
        - Product
      summary: Get All Product 
      parameters:
        - name: page
          in: query
          description: Nomor halaman yang diminta
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Jumlah produk per halaman
          required: false
          schema:
            type: integer
            default: 8
      responses:
        '200':
          description: successful Get All Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetAllResponse'
        '400':
          description: Error Get Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
  /products/{id}:
    get:
      tags:
        - Product
      summary: Get Product By Id
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful Get Product By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Error Get Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
    put:
      tags:
        - Product
      summary: Update Product By Id
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSchema'
      responses:
        '200':
          description: successful Update Product By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Update Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
    delete:
      tags:
        - Product
      summary: Update Product By Id
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful Delete Product By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Delete Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
  /carts:
    get:
      tags:
        - Cart
      summary: Get Cart
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful Get Cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Error Get Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
  /carts/{product_id}:
    post:
      tags:
        - Cart
      summary: Add Product To Cart
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: product_id
          schema:
            type: number
            example: 1
          required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful add product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Add Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
  /carts/{cart_id}:
    put:
      tags:
        - Cart
      summary: Update Product To Cart
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      parameters:
        - in: path
          name: cart_id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: successful Update product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Add Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'
    delete:
      tags:
        - Cart
      summary: Delete Product To Cart
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: cart_id
          schema:
            type: number
            example: 1
          required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          description: successful Delete product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error Add Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
        '404':
          description: Product Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'

  /orders:
    post:
      tags:
        - Order
      summary: Create Order
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
      responses:
        '200':
          description: successful create Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        '400':
          description: Error create Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
    get:
      tags:
        - Order
      summary: Get Order
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      responses:
        '200':
          description: get order by id user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
                # $ref: '#/components/schemas/ArrayOfCartSchema'
        '400':
          description: Error Get Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get User
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      responses:
        '200':
          description: get all User 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserResponse'
                # $ref: '#/components/schemas/ArrayOfCartSchema'
        '400':
          description: Error Get User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'
  /admin/orders:
    get:
      tags:
        - Admin
      summary: Get All Order
      description: This can only be done by the logged in user.
      security:
        - jwtAuth: []
      responses:
        '200':
          description: success get all order 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOrderResponse'
                # $ref: '#/components/schemas/ArrayOfCartSchema'
        '400':
          description: Error Get Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response500'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response401'

components:
  schemas:

    Response200:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
            required:
              - code
              - message
    Response400:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: "Bad Request"
            required:
              - code
              - message
    Response404:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: Not Found
            required:
              - code
              - message
    Response500:
            type: object
            properties:
              code:
                type: number
                example: 500
              message:
                type: string
                example: Internal Server Error
            required:
              - code
              - message
    Response401:
            type: object
            properties:
              code:
                type: number
                example: 401
              message:
                type: string
                example: Unauthorized
            required:
              - code
              - message
    UsersSchema:
      type: object
      properties:
        name:
          type: string
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
      example:
        name: "lendra syaputra"
        user_name: "lendra"
        email: "lendra@gmail.com"
        password: "lendra123"
        role: "user"
    GetProfil:
      type: object
      properties:
        name:
          type: string
        user_name:
          type: string
        email:
          type: string
        photo_profil:
          type: string
          format: uri
          description: URL of the product photo
      example:
        name: "lendra syaputra"
        user_name: "lendra"
        email: "lendra@gmail.com"
        photo_profil: 'https://sariroti.com/arjauser.jpg'
    EditProfil:
      type: object
      properties:
        name:
          type: string
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
        photo_profil:
          type: string
          format: uri
          description: URL of the product photo
      example:
        name: "lendra syaputra"
        user_name: "lendra"
        email: "lendra@gmail.com"
        password: "lendra432"
        photo_profil: https://sariroti.com/arjauser.jpg'
    ProductSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        category:
          type: string
        stock:
          type: integer
        photo_product:
          type: string
          format: uri
          description: URL of the product photo
      example:
        name: "Vivo"
        description: "VIVO Y12"
        price: 50000
        category: "Smartphone"
        stock: 10
        photo_product: 'https://sariroti.com/smartphone/photovivo.jpg'
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        category:
          type: string
        stock:
          type: integer
        photo_product:
          type: string
          format: uri
          description: URL of the product photo
        users: 
          type: array
          items:
            $ref: '#/components/schemas/UsersSchema'
      example:
        id: 1
        name: "Vivo"
        description: "VIVO Y12"
        price: 50000
        category: "Smartphone"
        stock: 10
        photo_product: 'https://sariroti.com/smartphone/photovivo.jpg'
        users: 
          id: 1
          name: TOKO ARJA
          photo_profil: 'https://sariroti.com/arjauser.jpg'
    ProductGetAllResponse:
        properties:
          Product:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                price:
                  type: integer
                category:
                  type: string
                photo_product:
                  type: string
                  format: uri
                  description: URL of the product photo
            example:
            - id: 1
              name: "Vivo"
              price: 50000
              category: phone
              photo_product: 'https://sariroti.com/smartphone/photovivo.jpg'
            - id: 2
              name: "Samsung"
              price: 60000
              category: phone
              photo_product: 'https://sariroti.com/smartphone/photosamsung.jpg'
            - id: 3
              name: "Xiaomi"
              price: 55000
              category: phone
              photo_product: 'https://sariroti.com/smartphone/photoxiaomi.jpg'
    CartResponse:
      type: array
      items:
        type: object
        properties:
          product:
            $ref: '#/components/schemas/ProductResponse'
          quantity:
            type: integer
      example:
        - product:
            id: 1
            name: "Samsung"
            price: 60000
            photo_product: 'https://sariroti.com/smartphone/photosamsung.jpg'
          quantity: 2
        - product:
            id: 2
            name: "vivo"
            price: 60000
            photo_product: 'https://sariroti.com/smartphone/photosamsung.jpg'
          quantity: 3
    AdminUserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        createdAt:
          type: string
          format: date-time
      example:
        id: 1
        name: "John Doe"
        username: "johndoe"
        email: "johndoe@example.com"
        role: "admin"
        createdAt: "2024-01-13T18:22:55Z"

    AdminOrderResponse:
      type: object
      properties:
        id:
          type: integer
        productName:
          type: string
        quantity:
          type: integer
        createdAt:
          type: string
          format: date-time
        payment:
          type: string
        totalPrice:
          type: number
          format: float
        address:
          type: string
        status:
          type: string
          enum: [proses, selesai, dibatalkan]
      example:
        id: 1
        productName: "Vivo Y12"
        quantity: 2
        createdAt: "2024-01-13T18:22:55Z"
        payment: "Credit Card"
        totalPrice: 3000000
        address: "Jalan Merdeka No.123, Jakarta"
        status: "proses"
    OrderSchema:
      type: object
      properties:
        cart_id:
          type: integer
        items:
            # type: array
            # $ref: '#/components/schemas/ProductResponse'
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/ProductResponse'
              quantity:
                type: integer
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: number
        payment:
          type: object
          properties:
            name:
              type: string
      example:
        cart_id: 1
        items:
          - product:
              id: 1
              name: "Samsung"
              price: 60000
              photo_product: 'https://sariroti.com/smartphone/photosamsung.jpg'
            quantity: 2
          - product:
              id: 2
              name: "vivo"
              price: 60000
              photo_product: 'https://sariroti.com/smartphone/photosamsung.jpg'
            quantity: 3
        address: 
          street: "Jalan Veteran No.10"
          city: "Malang"
          state: "Indonesia"
          zip: 10101
        payment:
          name: "COD (Cash Or Duel)"
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT